{% include '_header.py.jinja' %}
{% from '_utils.py.jinja' import recursive_types, active_provider, render_type with context %}
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType

from .filters import *
from .inputs import *

{% set depth = generator.config.recursive_type_depth %}

# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped
{% macro recursive(base) %}
    {% if recursive_types %}
{{ caller(base, base, '') }}
    {% else %}
    {%+ for i in range(depth) -%}
        {% if i == 0 %}
            {% set name = base %}
        {% else %}
            {% set name = base + 'Recursive%s' % i %}
        {% endif %}

        {% if i == depth - 1 %}
            {% set iteration = '' %}
        {% else %}
            {% set iteration = 'Recursive%s' % (i + 1) %}
        {% endif %}

        {% if iteration %}
            {% set next = base + iteration %}
        {% else %}
            {% set next = '' %}
        {% endif %}
{{ caller(name, next, iteration) }}
    {%- endfor %}
    {% endif %}
{% endmacro %}



{% for model in dmmf.datamodel.models %}
{% set model_schema = type_schema.get_model(model.name) %}
# {{ model.name }} types

# inputs extracted to inputs.py




class {{ model.name }}Include(TypedDict, total=False):
    """{{ model.name }} relational arguments"""
    {% for field in model.relational_fields -%}
        {{'    '}}{{ field.name }}: Union[bool, '{{ field.relational_args_type }}From{{ model.name }}']
    {% endfor %}


{% for related in dmmf.datamodel.models %}
{% call(name, next, iteration) recursive('%sIncludeFrom%s' % (related.name, model.name)) %}
class {{ name }}(TypedDict, total=False):
    """Relational arguments for {{model.name }}"""
    {% if next != '' -%}
        {% for field in related.relational_fields -%}
            {{'    '}}{{ field.name }}: Union[bool, '{{ field.relational_args_type }}From{{ model.name + iteration }}']
        {% endfor %}
    {% endif %}
{% endcall %}

{% call(name, next, iteration) recursive('%sArgsFrom%s' % (related.name, model.name)) %}
class {{ name }}(TypedDict, total=False):
    """Arguments for {{model.name }}"""
    {%+ if next != '' -%}
        include: '{{ related.name }}IncludeFrom{{ related.name + iteration}}'
    {% endif %}
{% endcall %}

{% call(name, next, iteration) recursive('FindMany%sArgsFrom%s' % (related.name, model.name)) %}
class {{ name }}(TypedDict, total=False):
    """Arguments for {{model.name }}"""
    take: int
    skip: int
    order_by: Union['{{ related.name }}OrderByInput', List['{{ related.name }}OrderByInput']]
    where: '{{ related.name }}WhereInput'
    cursor: '{{ related.name }}WhereUniqueInput'
    distinct: List['{{ related.name }}ScalarFieldKeys']
    {%+ if next != '' -%}
        include: '{{ related.name }}IncludeFrom{{ related.name + iteration}}'
    {% endif %}
{% endcall %}

{% endfor %}


FindMany{{ model.name }}Args = FindMany{{ model.name }}ArgsFrom{{ model.name }}
FindFirst{{ model.name }}Args = FindMany{{ model.name }}ArgsFrom{{ model.name}}


{% call(current, next, iteration) recursive(model.name + 'WhereInput') %}
class {{ current }}(TypedDict, total=False):
    """{{ model.name }} arguments for searching"""
    {% for field in model.all_fields -%}
        {{'    '}}{{ field.name }}: {{ field.where_input_type }}
    {% endfor %}

    {% if next != '' %}
    # should be noted that AND and NOT should be Union['{{ next }}', List['{{ next }}']]
    # but this causes mypy to hang :/
    AND: List['{{ next }}']
    OR: List['{{ next }}']
    NOT: List['{{ next }}']
    {% endif %}
{% endcall %}


# aggregate {{ model.name }} types


{% call(current, next, iteration) recursive(model.name + 'ScalarWhereWithAggregatesInput') %}
class {{ current }}(TypedDict, total=False):
    """{{ model.name }} arguments for searching"""
    {% for field in model.scalar_fields %}
    {{ field.name }}: {{ field.where_aggregates_input_type }}
    {% endfor %}

    {% if next != '' %}
    AND: List['{{ next }}']
    OR: List['{{ next }}']
    NOT: List['{{ next }}']
    {% endif %}
{% endcall %}


class {{ model.name }}GroupByOutput(TypedDict, total=False):
    {% for field in model.scalar_fields -%}
        {{ '    ' }}{{ field.name }}: {{ field.python_type }}
    {% endfor %}
    _sum: '{{ model.name }}SumAggregateOutput'
    _avg: '{{ model.name }}AvgAggregateOutput'
    _min: '{{ model.name }}MinAggregateOutput'
    _max: '{{ model.name }}MaxAggregateOutput'
    _count: '{{ model.name }}CountAggregateOutput'


class {{ model.name }}AvgAggregateOutput(TypedDict, total=False):
    """{{ model.name }} output for aggregating averages"""
    {% for field in model.scalar_fields %}
        {% if field.is_number -%}
            {{ '    ' }}{{ field.name }}: float
        {% endif %}
    {% endfor %}


class {{ model.name }}SumAggregateOutput(TypedDict, total=False):
    """{{ model.name }} output for aggregating sums"""
    {% for field in model.scalar_fields %}
        {% if field.is_number -%}
            {{ '    ' }}{{ field.name }}: {{ field.python_type }}
        {% endif %}
    {% endfor %}


class {{ model.name }}ScalarAggregateOutput(TypedDict, total=False):
    """{{ model.name }} output including scalar fields"""
    {% for field in model.scalar_fields -%}
        {{ '    ' }}{{ field.name }}: {{ field.python_type }}
    {% endfor %}


{{ model.name }}MinAggregateOutput = {{ model.name }}ScalarAggregateOutput
{{ model.name }}MaxAggregateOutput = {{ model.name }}ScalarAggregateOutput


class {{ model.name }}MaxAggregateInput(TypedDict, total=False):
    """{{ model.name }} input for aggregating by max"""
    {% for field in model.scalar_fields -%}
        {{ '    ' }}{{ field.name }}: bool
    {% endfor %}


class {{ model.name }}MinAggregateInput(TypedDict, total=False):
    """{{ model.name }} input for aggregating by min"""
    {% for field in model.scalar_fields -%}
        {{ '    ' }}{{ field.name }}: bool
    {% endfor %}


class {{ model.name }}NumberAggregateInput(TypedDict, total=False):
    """{{ model.name }} input for aggregating numbers"""
    {% for field in model.scalar_fields %}
        {% if field.is_number -%}
            {{ '    ' }}{{ field.name }}: bool
        {% endif %}
    {% endfor %}


{{ model.name }}AvgAggregateInput = {{ model.name }}NumberAggregateInput
{{ model.name }}SumAggregateInput = {{ model.name }}NumberAggregateInput


{{ model.name }}CountAggregateInput = TypedDict(
    '{{ model.name }}CountAggregateInput',
    {
        {% for field in model.scalar_fields %}
        '{{ field.name }}': bool,
        {% endfor %}
        '_all': bool,
    },
    total=False,
)

{{ model.name }}CountAggregateOutput = TypedDict(
    '{{ model.name }}CountAggregateOutput',
    {
        {% for field in model.scalar_fields %}
        '{{ field.name }}': int,
        {% endfor %}
        '_all': int,
    },
    total=False,
)


{{ model.name }}Keys = Literal[
    {% for field in model.all_fields %}
    '{{ field.name }}',
    {% endfor %}
]
{{ model.name }}ScalarFieldKeys = Literal[
    {% for field in model.scalar_fields %}
    '{{ field.name }}',
    {% endfor %}
]
{{ model.name }}ScalarFieldKeysT = TypeVar('{{ model.name }}ScalarFieldKeysT', bound={{ model.name }}ScalarFieldKeys)

{% if model.has_relational_fields -%}
    {{ model.name }}RelationalFieldKeys = Literal[
        {% for field in model.relational_fields %}
        '{{ field.name }}',
        {% endfor %}
    ]
{% else -%}
    {{ model.name }}RelationalFieldKeys = _NoneType
{% endif %}

{% endfor %}


# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields
